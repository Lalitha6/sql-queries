--Create employee table
CREATE TABLE employee (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT CHECK (age > 0),
    salary DECIMAL(10, 2) CHECK (salary > 0),
    dept_id INT,
    hire_date DATE CHECK (hire_date <= CURRENT_DATE)
);

INSERT INTO employee (emp_id, name, age, salary, dept_id, hire_date)
VALUES
    (1, 'John Doe', 28, 50000.00, 1, '2020-01-15'),
    (2, 'Jane Smith', 34, 60000.00, 2, '2023-07-23'),  
    (3, 'Bob Brown', 45, 80000.00, 1, '2018-02-12'),
    (4, 'Alice Blue', 25, 45000.00, 3, '2021-03-22'),
    (5, 'Charlie P', 29, 50000.00, 2, '2019-12-01');

--Select only name and salary columns
SELECT name, salary
FROM Employee;

--Select employees who are older than 30
SELECT *
FROM Employee
WHERE age > 30;

--Create department table
CREATE TABLE Department(
  dept_id INT(10),
  dept_name VARCHAR(30)
);
INSERT INTO Department(dept_id, dept_name)
VALUES 
    (1, 'IT'),
    (2, 'HR'),
    (3, 'Finance'),
    (4, 'Marketing');

--Create project table
CREATE TABLE Project_Table(
  project_id INT(10),
  name VARCHAR(30),
  dept_id INT(10)
);
INSERT INTO Project_Table(project_id, name, dept_id)
VALUES
  (1, 'Project Alpha', 1),
  (2, 'Project Beta', 2),
  (3, 'Project Gamma', 1),
  (4, 'Project Delta', 3),
  (5, 'Project Epsilon', 4);

--Select employees whose names start with J
SELECT * FROM Employee
WHERE name LIKE 'J%';

--Select employees whose name ends with e
SELECT * FROM Employee
WHERE name LIKE '%e';

--Select employees whose names contains a
SELECT * FROM Employee
WHERE name LIKE '%a%;

--Select employees whose names are exactly 9 characters long
SELECT * FROM Employee
WHERE LENGTH(name) = 9;

--Select employee whose name has 'o' as the second character
SELECT * FROM Employee
WHERE name LIKE '_o%';

--Select employee whose hire date is 2020
SELECT * FROM Employee
WHERE hire_date LIKE '2020%';

--Select employee hired in january of any year
SELECT * FROM Employee
WHERE hire_date LIKE '-01-%';

--Select employee hired before 2019
SELECT * FROM Employee
WHERE hire_date < '2019-01-01';

--Select employees hired on or after march 1, 2021
SELECT * FROM Employee
WHERE hire_date >= '2021-03-01';

--Select sum of salary of all employees
SELECT SUM(salary) AS total_salary
FROM Employee;

--Select average salary of all employees
SELECT AVG(salary) AS average_salary
FROM Employee;

--Select minimum salary from the employee table
SELECT MIN(salary) AS minimum_salary
FROM Employee;

--Select number of employees in each dept
SELECT dept_id, COUNT(*) AS num_employees
FROM Employee
GROUP BY dept_id;

--Select the average salary of employees in each department
SELECT dept_id, AVG(salary) AS avg_salary
FROM Employee
GROUP BY dept_id;

--Select the total salary by each department
SELECT dept_id, SUM(salary) AS total_salary
FROM Employee
GROUP BY dept_id;

--Select the average age of employees in each department
SELECT dept_id, AVG(age) AS average_age
FROM Employee
GROUP BY dept_id;

--Select the number of employees hired in each year
SELECT (hire_date) AS hire_year, COUNT(*) AS num_employees
FROM Employee
GROUP BY (hire_date);

--Select the highest salary in each department
SELECT department_id, MAX(salary) AS highest_salary
FROM Employee
GROUP BY department_id;

--Select the department with the highest average salary
SELECT department_name

--Select departments with more than 2 employees
SELECT department_id, COUNT(*) AS Employee_count
FROM Employee
GROUP BY department_id, 
HAVING count(*) > 2;

--Select departments with an average salary greater than 55000
SELECT department_id, AVG(salary) AS avg_salary
FROM Employee
GROUP BY department_id
HAVING avg(salary) > 55000;

--Select years with more than 1 employee hired
SELECT hire_date AS hire_year, COUNT(*) AS employee_count
FROM Employee
GROUP BY hire_date
HAVING COUNT(*) > 1;

--Select departments with a total salary expenses less than 100000
SELECT department_id, SUM(salary) AS salary_expenses
FROM Employee
GROUP BY department_id
HAVING SUM(salary) < 100000;

--Select departments with the maximum salary above 75000
SELECT department_id, MAX(salary) AS max_salary
FROM Employee
GROUP BY department_id
HAVING MAX(salary) > 75000;

--Select employees ordered by their salary in ascending order
SELECT * FROM Employee
ORDER BY salary ASC;

--Select employees ordered by their salary in descending order
SELECT * FROM Employee
ORDER BY salary DESC;

--Select employees ordered by their hire date in ascending order
SELECT * FROM Employee
ORDER BY hire_date ASC;

--Select employees by their department and then by their salary
SELECT * FROM Employee
ORDER BY department_id, salary;

--Select departments ordered by their total salary of their employees
SELECT department_id, SUM(salary) AS total_salary
FROM Employee
GROUP BY department_id
ORDER BY total_salary DESC;

--Select the employee with the highest salary
SELECT emp_id, name, salary
FROM Employee
WHERE salary = (
SELECT MAX(salary) FROM Employee
);

--Select the employees whose salary is above average salary
SELECT emp_id, name, salary
FROM Employee
WHERE salary > (
SELECT AVG(salary) FROM Employee
);

--Select the second highest salary from the employee table
SELECT MAX(salary) AS second_highest_salary
FROM Employee
WHERE salary < (
SELECT MAX(salary) FROM Employee
);

--Select the department with most employees
SELECT department_id, COUNT(*) AS employee_count
FROM Employee
WHERE department_id = (
    SELECT department_id
    FROM Employee
    GROUP BY department_id
    ORDER BY COUNT(*) DESC
    LIMIT 1
)
GROUP BY department_id;

--Select employees who earn more than the average salary of their department
SELECT E.employee_id, E.employee_name, E.salary, E.department_id
FROM Employee E
WHERE E.salary > (
    SELECT AVG(salary)
    FROM Employee
    WHERE department_id = E.department_id
);

--Select the nth highest salary(3rd highest salary)
SELECT MAX(salary) AS third_highest_salary
FROM Employee
WHERE salary NOT IN (
    SELECT salary
    FROM Employee
    ORDER BY salary DESC
    LIMIT 2
);








